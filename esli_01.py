import pandas as pd
import numpy as np

def get_calculations_definitions() -> dict:
    """
    점수 계산에 사용하는 질문 목록 정의를 반환합니다.
    키는 계산 항목명(예: '목표','자기성취' 등), 값은 {'cols': [질문들], 'multiplier': int} 형태.
    esli_02 등 다른 모듈에서 전수 매핑 시드에 사용합니다.
    """
    return {
        '사회적바람직성': {'cols': ['한 번도 다른 사람에게 거짓말을 해본 적이 없다', '부탁하는 사람들 때문에 가끔 짜증이 날 때도 있다', '실수했을 때 항상 다른 사람에게 사과하고 인정한다', '마음에 들지 않는 사람에게도 언제나 예의바르게 행동한다', '어른이 하는 말이 맞다는 것을 알면서도 반항하고 싶었던 적이 있다', '능력이 부족하다고 생각해서 어떤 일을 중간에 그만둔 적이 있다', '어느 누구와 이야기해도 다른 사람 말을 잘 들어준다', '마음대로 하지 못하면 화가 날 때도 있다', '다른 사람을 이용해서 이익을 얻으려 한 적이 한 번도 없다', '다른 친구가 잘 되는 것이 부러웠던 적이 있다', '억울한 일을 당했을 때, 복수하려는 생각을 가져본 적이 있다'], 'multiplier': 11},
        '직접적 보상처벌': {'cols': ['좋은 성적을 얻으면 용돈을 주시거나 좋은 선물을 사주니까', '공부 안하면 어른들에게 잔소리 들으니까', '공부하는 것은 정말 싫지만 선생님이나 부모님이 하라고 하니까', '부모님이나 선생님이 바라시는 대학에 가기위해', '좋은 성적을 받지 못하면 용돈이 줄거나 자유시간이 줄어서', '시험 성적이 떨어지면 부모님께 혼나는 것이 싫어서', '선생님이나 부모님이 공부하라고 한 분량을 맞춰놓아야 하니까'], 'multiplier': 7},
        '사회적 관계': {'cols': ['남들 다 하는 공부 나만 안하면 불안해서', '부모님이나 선생님이 기대하는 것을 만족시켜드리기 위해', '학생은 당연히 공부를 해야 하니까', '공부잘하면 다른 아이들이 나를 함부로 대하지 못하니까', '공부잘하면 원하는 대학에 입학할 수 있으니까', '공부잘해서 좋은 성적을 얻으면 다른 사람들이 칭찬해주니까', '가족들에게 모범이 되는 모습을 보여주어야 하니까'], 'multiplier': 7},
        '자기성취': {'cols': ['공부하며 성장하는 내 모습이 자랑스러워서', '내가 원하는 직업을 얻기 위해서는 꼭 공부를 해야 하니까', '공부하며 내가 몰랐던 것들을 알게 되는 것이 즐거워서', '공부하고 남은 시간을 자유롭게 보내기 위해', '내가 정한 목표를 하나씩 성취하는 것이 뿌듯해서', '다른 사람이 시켜서 하는 것보다 스스로 하는게 더 보람있으니까', '공부하는 것은 그 누구보다 나에게 가장 도움이 되니까'], 'multiplier': 7},
        '목표세우기': {'cols': ['어떤 일을 하기 전에 항상 목표세워 시작한다', '특별히 되고 싶은 직업이나 장래 희망이 없다', '미래에 성공한 나의 모습을 상상하면 마음이 설렌다', '누군가가 목표를 정해주고 나는 그대로 시키는대로만 했으면 좋겠다', '공부할 때는 별로 목표수립은 필요없다', '흥미 있는 대학 학과나 직업에 대해 이것 저것 찾아본 적이 있다', '목표가 있으면 부담스러워서 목표를 세우지 않고 공부하는 편이다'], 'multiplier': 7},
        '계획하기': {'cols': ['공부 계획을 위한 다이어리나 계획표를 사용한다', '따로 공부계획을 세우지 않고 그날 그날 공부한다', '계획을 세워도 지키지 않는 경우가 더 많다', '하루에 얼만큼 공부할 수 있을지 잘 모르기 때문에 계획을 미리 짜는 것은 불가능하다', '오늘 해야 할 공부가 계획되어 있다', '단원평가나 학교시험의 범위와 일정에 맞춰 계획을 세워 공부한다', '계획은 어차피 바뀌므로 굳이 세울 필요가 없다'], 'multiplier': 7},
        '실천하기': {'cols': ['공부하다보면 쉽게 피곤해져서 계속 공부하기 어렵다', '공부하기로 마음 먹고 나서도 한참 지나야 겨우 공부를 시작한다', 'TV나 주변 소리에도 크게 신경쓰지 않고 공부할 수 있다', '오늘 할 일은 미루지 않고 끝내려고 노력한다', '게임이나 친구들과 놀이 때문에 계획한 공부시간을 놓치는 경우가 많다', '공부하기 어려운 과목도 해야 할 분량은 빼먹지 않고 공부한다', '책상 앞에 앉아 있지만 집중해서 공부한 시간은 얼마 되지 않는다'], 'multiplier': 7},
        '돌아보기': {'cols': ['단원평가나 학원 테스트 끝나면 틀린 문제를 다시 풀며 틀린 이유를 확인한다', '하루 마무리 할 때에는 오늘 했었던 일을 정리하는 시간을 갖는다', '문제를 푼 뒤에는 몇 개를 맞고 틀렸는지만 확인하고 넘어간다', '좋지 않는 결과가 나오면 왜 그렇게 되었는지 생각해보는 편이다', '같은 실수 때문에 잘못을 반복한다고 혼나는 경우가 많다', '운이 나빠서 자꾸 일이 잘못 되는 것 같다', '잘된 일들은 굳이 되돌아볼 필요가 없다'], 'multiplier': 7},
        '이해하기': {'cols': ['공부할 때는 학습 목표를 꼭 확인한다', '공부하다가 잘 모르는 단어가 나오면 무슨 뜻인지 찾아보고 넘어간다', '다른 사람의 도움 없이는 새로 배우는 단원의 내용을 이해하기가 어렵다', '수업시간에 수업 듣지 않고 자거나 다른 숙제를 하는 편이다', '선생님 수업 내용을 어렵지 않게 이해할 수 있다', '새로 배우는 단원은 여러 번 반복해서 설명을 들어야 겨우 무슨 내용인지 알 수 있다', '수업을 잘 듣지 못해도 참고서나 자습서를 이용하면 공부에 문제 없다'], 'multiplier': 7},
        '사고하기': {'cols': ['공부할 내용의 뜻을 이해하기 보다는 바로 외우는 편이다', '잘 이해되지 않는 내용은 어떻게든 꼭 알아보고 넘어가야 마음이 놓인다', '새로운 내용을 배우면 전에 배운 내용과 비교하면서 공부한다', '혼자서 공부하는 것 보다는 남이 가르쳐주는 것을 듣는 것이 훨씬 좋다', '공부할 때 배우는 내용이 내가 알던 것과 달라서 의문을 가져본 적이 없다', '새로운 것을 배우면 이전에 배운 내용들이 더욱 잘 이해되는 것 같다', '참고서에 나온 내용도 왜 그런지 생각을 하면서 공부하는 편이다'], 'multiplier': 7},
        '정리하기': {'cols': ['과목에 따라 다르게 사용하는 정리 노트들을 가지고 있다', '공부한 내용을 정리노트나 마인드맵을 이용해 공부하지 않는다', '수업을 들으면 전에 배운 내용들과 관계를 연결지어 공부할 수 있다', '어떤 단원을 마치고 나면 전체 내용을 다시 정리해본다', '전체 내용을 보지 않고 밑줄 그은 것만 확인하며 공부해도 충분하다', '내 노트는 참고서를 복사한 것처럼 잘 정리되어 있다', '과목별로 일정한 나만의 노트 필기 방법으로 정리한다'], 'multiplier': 7},
        '암기하기': {'cols': ['중요한 외울 내용들은 꼭 다 외우면서 공부한다', '참고서에 잘 정리되어 있어서, 굳이 내가 직접 공부한 내용을 정리할 필요는 없다', '암기할 때 주로 사용하는 나만의 암기법이 있다', '외운것 같아도 막상 기억하려고 하면 기억나질 알아서 책을 뒤적인다', '공식 같은것 외우지 않아도 충분히 좋은 성적을 받을 수 있다고 생각한다', '한 번 외운 내용은 오랫동안 잘 기억하는 편이다', '암기에 사용하는 노트가 따로 있다'], 'multiplier': 7},
        '문제풀기': {'cols': ['단원평가를 보면 거의 생각했던 문제가 출제된다', '처음 보는 문제도 당황하지 않고 풀어서 맞출 수 있다', '제시된 문제를 잘못 읽어 틀린 문제가 자주 발견된다', '문제풀이 할때는 물어보는 것이 무엇인지 먼저 파악하고 풀이를 시작한다', '나올 만한 예상문제의 답만 외운 뒤 질문을 보자마자 답을 쓰는 경우가 많다', '문제 풀 때에 무엇을 어떻게 활용해서 풀지 몰라 답답한 경우가 많다', '한 번 풀어서 맞춘 문제를 다음에 다시 풀어도 자주 틀리는 편이다'], 'multiplier': 7},
        '스트레스민감성': {'cols': ['마음대로 일이 되지 않으면 불안하다', '좋지 않은 일이 생기면 배가 아픈 경우가 많다', '작은 일도 다른 사람들이 어떻게 생각할지 신경이 많이 쓰인다', '하고 싶어하는 일을 하기도 전에 잘못될 걱정을 많이 한다', '능력이 부족하다고 생각해서 어떤 일을 중간에 그만둔 적이 있다', '운이 나빠서 자꾸 일이 잘못 되는 것 같다'], 'multiplier': 6},
        '학습효능감': {'cols': ['다른 친구들에 비해 머리가 많이 나쁜것 같다', '내가 공부한 만큼 또는 그 이상 결과를 얻고 있다', '아무리 노력해도 좋은 성적을 받을 수 없을 것 같다', '머리가 좋은 편이어서 친구들보다 쉽게 공부한다', '어려운 문제라도 충분히 시간이 주어지면 스스로 풀어낼 자신이 있다', '혼자 문제를 푸는 것보다 다른 사람에게 물어보는 것이 낫다'], 'multiplier': 6},
        '친구관계': {'cols': ['학교에서 은근 따돌림 받는 것 같다', '학교에서 먼저 반겨주고 이야기 건네주는 친구가 있다', '학교 끝나고 친구들과 만나서 놀기도 한다', '친구들에게 내가 먼저 말을 걸기가 어렵다', '주변 친구들은 대부분 나와 사이가 좋지 않다', '친구들과 함께 노는 일은 정말 즐겁다'], 'multiplier': 6},
        '가정환경': {'cols': ['나에 관한 결정에서 부모님은 항상 내 의견 묻고 결정한다', '부모님과 밥 먹는 것이 힘들다', '부모님이 형제자매나 사촌과 비교하는 말을 자주한다', '모든것을 마음대로 결정하는 부모님 때문에 답답하다', '갑자기 깜짝 놀랄 정도로 부모님께서 화를 내는 경우가 자주 있다', '가족 중에 나를 이해해주는 사람이 있어서 고민을 이야기 할 수 있다'], 'multiplier': 6},
        '학교환경': {'cols': ['학교에서 배우는 것이 나에게 많은 도움이 될 것 같다', '학교 선생님에게 꾸중보다 칭찬을 더 듣는다', '담임선생님이 내가 나쁜 학생이라고 불친절하다', '방학때 너무 심심해서 차라리 학교가고 싶다는 생각을 한 적이 있다', '학교에 가면 나도 모르게 무섭거나 짜증나서 별로 가고 싶지 않다', '학교에 가는 것은 재미있는 일이다'], 'multiplier': 6},
        '수면조절': {'cols': ['밤10시만 되도 잠이 와서 공부하기 어렵다', '학교 수업시간에 자는 경우가 많다', '단원평가나 학교시험을 위해서는 평소보다 잠을 줄여 공부하는 편이다', '하루 평균 10시간 이상 자는 것 같다', '혼자 공부하다 잠이 오면 잠을 깨는 나만의 방법이 있다'], 'multiplier': 5},
        '학습집중력': {'cols': ['공부하려고 앉으면 10분도 안되서 딴 생각에 빠진다', '제대로 공부에 집중하려면 최소 10분이상 준비할 시간이 필요하다', '공부하다가 나도 모르게 시간이 훌쩍 지나간 경우가 많다', '공부시작하면 마칠 때까지 거의 공부만 한다', 'TV나 주변 소리에도 크게 신경쓰지 않고 공부할 수 있다'], 'multiplier': 5},
        'TV프로그램': {'cols': ['숙제를 하다가도 꼭 봐야하는 TV프로그램이 있다', '하루에 1~2시간 이상 TV를 본다', 'TV드라마나 어린이 프로그램 한 두편 정도 보는 것은 크게 상관없다', '친구들과 대화하는 거의 모든 주제는 TV프로그램과 관련된 것이다', '내가 좋아하는 TV프로그램을 놓치면 궁금해서 다른 일을 할 수가 없다'], 'multiplier': 5},
        '컴퓨터': {'cols': ['매일 1시간 이상 공부와 관련 없이 컴퓨터를 한다 (게임, 인터넷 등)', '공부하다가도 게임 인터넷 생각이 나면 컴퓨터를 해야 마음이 편하다', '한밤에 가족들이 모두 자는 동안 몰래 컴퓨터를 하는 경우가 많다', '단원평가 전이나 시험 준비할 때에는 게임이나 인터넷에 접속하지 않는다', '학교나 학원 친구보다 게임, 인터넷 커뮤니티 친구들과 더 친하다'], 'multiplier': 5},
        '스마트기기': {'cols': ['핸드폰이나 스마트기기가 없어도 내 생활에 큰 영향은 없다', '문자나 인터넷, 게임 등을 위해 하루 1시간 이상 핸드폰을 한다', '핸드폰이 거의 1분 간격으로 카톡 알림이 울린다', '친구들과 톡을 주고 받지 못하면 불안하다', '스마트폰 데이터가 다 떨어져서 사용못하면 매우 답답하다'], 'multiplier': 5},
    }

def calculate_scores(scored_responses: dict) -> pd.DataFrame:
    """
    Gradio에서 전달받은 점수 딕셔셔너리를 사용하여 원점수를 계산하고 결과를 DataFrame으로 반환합니다.
    """
    try:
        # --- 1. 입력 딕셔너리를 DataFrame으로 변환 ---
        # scored_responses의 key는 전체 질문 텍스트, value는 1~4점입니다.
        # 계산에 필요한 것은 '카테고리 [질문텍스트]' 형태의 키이므로, 매핑을 다시 정의합니다.
        df = pd.DataFrame([scored_responses])

        # --- 2. 결과 데이터프레임 초기화 ---
        results_df = pd.DataFrame(index=df.index)

        # --- 3. 계산 항목 정의 ---
        calculations = get_calculations_definitions()

        # --- 4. 항목별 계산 수행 ---
        for name, params in calculations.items():
            # df.columns는 scored_responses의 key (전체 질문 텍스트) 리스트입니다.
            # params['cols']의 각 항목(짧은 질문 텍스트)이 df.columns의 항목에 포함되는지 확인해야 합니다.
            # 이 방법은 부분 문자열 매칭으로 인해 부정확할 수 있으므로, 정확한 전체 질문 텍스트로 매핑해야 합니다.
            # 지금은 scored_responses의 key가 정확히 params['cols']와 일치한다고 가정하고 진행합니다.
            existing_cols = [col for col in params['cols'] if col in df.columns]
            if existing_cols:
                numeric_cols = df[existing_cols].apply(pd.to_numeric, errors='coerce').fillna(0)
                results_df[name] = np.round(numeric_cols.mean(axis=1) * params['multiplier'])
            else:
                results_df[name] = 0

        # --- 5. 총점 계산 ---
        strategy_cols = ['목표세우기', '계획하기', '실천하기', '돌아보기']
        skill_cols = ['이해하기', '사고하기', '정리하기', '암기하기', '문제풀기']
        
        # '정리하기'는 '실천하기'와 이름이 겹치므로, calculations 딕셔너리의 키를 수정해야 합니다.
        # esli_02.py에서는 '실천하기'를 '정리하기'로도 사용하는 문제가 있었습니다.
        # 여기서는 '정리하기'를 skill_cols에 사용하고, '실천'을 strategy_cols에 사용합니다.
        
        results_df['학습전략'] = results_df[strategy_cols].sum(axis=1)
        results_df['학습기술'] = results_df[skill_cols].sum(axis=1)

        # esli_02.py와의 호환성을 위해 '실천하기' 컬럼을 '정리하기'로 복사
        if '실천하기' in results_df.columns:
             results_df['정리하기'] = results_df['실천하기']


        print("--- 원점수 계산 완료 ---")
        print(results_df.head())
        return results_df

    except Exception as e:
        import traceback
        traceback.print_exc()
        print(f"점수 계산 중 오류 발생: {e}")
        # 오류 발생 시 빈 데이터프레임 반환
        return pd.DataFrame()